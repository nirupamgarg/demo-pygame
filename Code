import pygame
pygame.init()
window_width = 500
window_height = 480
win = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("First game")
clock = pygame.time.Clock()

bg = pygame.image.load('bg.jpg')
char = pygame.image.load('standing.png')
walkleft = [pygame.image.load('L1.png'), pygame.image.load('L2.png'), pygame.image.load('L3.png'), pygame.image.load('L4.png'), pygame.image.load('L5.png'), pygame.image.load('L6.png'), pygame.image.load('L7.png'), pygame.image.load('L8.png'), pygame.image.load('L9.png')]
walkright = [pygame.image.load('R1.png'), pygame.image.load('R2.png'), pygame.image.load('R3.png'), pygame.image.load('R4.png'), pygame.image.load('R5.png'), pygame.image.load('R6.png'), pygame.image.load('R7.png'), pygame.image.load('R8.png'), pygame.image.load('R9.png')]

bulletsound = pygame.mixer.Sound('bullet.wav')
hitsound = pygame.mixer.Sound('hit.wav')

music = pygame.mixer.music.load('music.mp3')
pygame.mixer.music.play(-1)

score=0


class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel=5
        self.acceleration = 10
        self.Jump = False
        self.count = 10
        self.left = False
        self.right = False
        self.walkcount=0
        self.standing = True
        self.hitbox = (self.x+17, self.y+11, 29, 52)


    def draw(self, win):
        if self.walkcount>=27:
            self.walkcount=0

        if not self.standing:
            if self.left:
                win.blit(walkleft[self.walkcount//3], (self.x, self.y))
                self.walkcount+=1
            elif self.right:
                win.blit(walkright[self.walkcount//3], (self.x, self.y))
                self.walkcount+=1
        else:
            if self.right:
                win.blit(walkright[0], (self.x, self.y))
            else:
                win.blit(walkleft[0], (self.x, self.y))

        self.hitbox = (self.x+17, self.y+11, 29, 52)
        #pygame.draw.rect(win, (255, 0, 0), self.hitbox, 2)

    def hit(self):
        self.Jump=False
        self.count = 10
        self.x = 60
        self.y = 410
        self.walkcount = 0
        pygame.font.SysFont('comicsans', 100)
        text = font.render('-5', 1, (255, 0, 0))
        win.blit(text, (window_width/2 - (text.get_width()/2), window_height/2 - (text.get_height()/2)))
        pygame.display.update()
        i=0
        while i < 300:
            pygame.time.delay(10)
            i += 1
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    i = 301
                    pygame.quit()

class projectile():
    def __init__(self, x, y, radius, color, facing):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.facing = facing
        self.vel = 8*facing

    def draw(self, win):
        pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)

class enemy(object):
    walkleft = [pygame.image.load('L1E.png'), pygame.image.load('L2E.png'), pygame.image.load('L3E.png'), pygame.image.load('L4E.png'), pygame.image.load('L5E.png'), pygame.image.load('L6E.png'), pygame.image.load('L7E.png'), pygame.image.load('L8E.png'), pygame.image.load('L9E.png'), pygame.image.load('L10E.png'), pygame.image.load('L11E.png')]
    walkright = [pygame.image.load('R1E.png'), pygame.image.load('R2E.png'), pygame.image.load('R3E.png'), pygame.image.load('R4E.png'), pygame.image.load('R5E.png'), pygame.image.load('R6E.png'), pygame.image.load('R7E.png'), pygame.image.load('R8E.png'), pygame.image.load('R9E.png'), pygame.image.load('R10E.png'), pygame.image.load('R11E.png')]

    def __init__(self, x, y, width, height, end):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.end = end
        self.path = [self.x, self.end]
        self.walkcount = 0
        self.vel = 3
        self.hitbox = (self.x+17, self.y+2, 31, 57)
        self.health = 10
        self.visible = True

    def draw(self, win):
        self.move()
        if self.visible:
            if self.walkcount>=33:
                self.walkcount=0
            if self.vel>0:
                win.blit(self.walkright[self.walkcount //3], (self.x, self.y))
                self.walkcount+=1
            else:
                win.blit(self.walkleft[self.walkcount //3], (self.x, self.y))
                self.walkcount+=1
            pygame.draw.rect(win, (255, 0, 0), (self.hitbox[0], self.hitbox[1]-20, 50, 10))
            pygame.draw.rect(win, (0, 255, 0), (self.hitbox[0], self.hitbox[1]-20, 50 - (5 * (10 - self.health)), 10))
            self.hitbox = (self.x+17, self.y+2, 31, 57)
            #pygame.draw.rect(win, (255, 0, 0), self.hitbox, 2)

    def move(self):
        if self.vel>0:
            if self.x+self.vel<self.path[1]:
                self.x+=self.vel
            else:
                self.vel = self.vel*-1
                self.walkcount = 0
        else:
            if self.x-self.vel>self.path[0]:
                self.x+=self.vel
            else:
                self.vel = self.vel*-1
                self.walkcount = 0

    def hit(self):
        if self.health>0:
            self.health -= 1
        else:
            self.visible = False
        print('hit')


def redrawgamewindow():
    win.blit(bg, (0, 0))
    text = font.render('Score: ' + str(score), 1, (0, 0, 0))
    win.blit(text, (390, 10))
    man.draw(win)
    goblin.draw(win)
    for bullet in bullets:
        bullet.draw(win)
    pygame.display.update()

#MainLoop
font = pygame.font.SysFont('comicsans', 30, True)
man = player(300, 410, 64, 64)
goblin = enemy(100, 415, 64, 64, 300)
shootloop = 0
bullets = []
run = True
while run:
    clock.tick(27)
    if goblin.visible == True:
        if man.hitbox[1] < goblin.hitbox[1] + goblin.hitbox[3] and man.hitbox[1] + man.hitbox[3] > goblin.hitbox[1]:
            if man.hitbox[0] + man.hitbox[2] > goblin.hitbox[0] and man.hitbox[0]  < goblin.hitbox[0] + goblin.hitbox[2]:
                man.hit()
                score -= 5

    if shootloop > 0:
        shootloop += 1
    if shootloop > 3:
        shootloop = 0

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
    for bullet in bullets:
        if bullet.y - bullet.radius < goblin.hitbox[1] + goblin.hitbox[3] and bullet.y + bullet.radius > goblin.hitbox[1]:
            if bullet.x + bullet.radius > goblin.hitbox[0] and bullet.x - bullet.radius < goblin.hitbox[0] + goblin.hitbox[2]:
                hitsound.play()
                goblin.hit()
                score += 1
                bullets.pop(bullets.index(bullet))

        if bullet.x < 500 and bullet.x > 0:
            bullet.x += bullet.vel
        else:
            bullets.pop(bullets.index(bullet))

    keys = pygame.key.get_pressed()

    if keys[pygame.K_SPACE] and shootloop==0:
        bulletsound.play()
        if man.left:
            facing = -1
        else:
            facing = 1
        if len(bullets) < 5:
            bullets.append(projectile(round(man.x+man.width //2), round(man.y+man.height //2), 6, (0,0,0), facing))
        shootloop = 1

    if keys[pygame.K_LEFT] and man.x >= man.vel:
        man.x -= man.vel
        man.left = True
        man.right = False
        man.standing = False

    elif keys[pygame.K_RIGHT] and man.x < window_width-man.width:
        man.x += man.vel
        man.right = True
        man.left = False
        man.standing = False

    else:
        man.standing = True
        man.walkcount = 0

    if not man.Jump:
        if keys[pygame.K_UP]:
            man.Jump = True
    else:
        if man.count>=-10:
            neg=1
            if man.count<0:
                neg=-1
            man.y -= (man.count**2)*0.5*neg
            man.count-=1
        else:
            man.Jump=False
            man.count=10
    redrawgamewindow()

pygame.quit()

